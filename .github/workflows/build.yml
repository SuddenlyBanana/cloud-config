name: reprovision-img-build
run-name: "Build custom reprovison image"

on:
  push:
    branches:
      - main

permissions:
  actions: write
  contents: read

env:
  COREOS_IMAGE_VERSION: 41.20250331.3.0
  BUILD_DIR: /build
  PROFILENAME: reprovision

jobs:
  build-config:
    name: Build Ignition config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Run Butane and build Ignition config
        run: |
          podman run --interactive --rm --security-opt label=disable --volume ${PWD}:/pwd --workdir /pwd quay.io/coreos/butane:release \
           --pretty --strict coreos-config.bu > ucore-ignition.ign
      
      - name: Upload Ignition config
        uses: actions/upload-artifact@v4
        with:
          name: ignition-config.zip
          path: ./ucore-ignition.ign
          if-no-files-found: error
  
  build-alpine-image:
    needs: build-config
    name: Build custom alpine image
    runs-on: ubuntu-latest
    container:
      image: alpine:3.21
      options: --privileged

    steps:
      - name: Installing prerequsites
        run: |
          su root
          apk add alpine-sdk alpine-conf syslinux xorriso squashfs-tools grub grub-efi doas mtools dosfstools grub-efi curl gnupg podman fuse-overlayfs unzip

      - name: Enviroment setup
        run: |
          echo "permit nopass :wheel" >> /etc/doas.conf
          addgroup root abuild
          mkdir -pv ${{ env.BUILD_DIR }}
          mkdir -pv ${{ env.BUILD_DIR }}/img

      - name: Clone repo
        run: git clone --depth=1 https://github.com/SuddenlyBanana/cloud-config.git ${{ env.BUILD_DIR }}/cloud-config

      - name: Cloning aports repository
        run: git clone --depth=1 https://gitlab.alpinelinux.org/alpine/aports.git ${{ env.BUILD_DIR }}/aports

      - name: Install scripts
        run: |
          cp ${{ env.BUILD_DIR }}/cloud-config/mkimg.${{ env.PROFILENAME }}.sh ${{ env.BUILD_DIR }}/aports/scripts/mkimg.${{ env.PROFILENAME }}.sh
          cp ${{ env.BUILD_DIR }}/cloud-config/genapkovl-mkimgoverlay.sh ${{ env.BUILD_DIR }}/aports/scripts/genapkovl-mkimgoverlay.sh
          cp ${{ env.BUILD_DIR }}/cloud-config/bootstrap ${{ env.BUILD_DIR }}/bootstrap
          chmod +x ${{ env.BUILD_DIR }}/aports/scripts/mkimg.${{ env.PROFILENAME }}.sh
          chmod +x ${{ env.BUILD_DIR }}/aports/scripts/genapkovl-mkimgoverlay.sh
          chmod +x ${{ env.BUILD_DIR }}/bootstrap

      - name: Download Fedora CoreOS image
        run: |
          curl --output ${{ env.BUILD_DIR }}/coreos-image.qcow2.gz "https://builds.coreos.fedoraproject.org/prod/streams/stable/builds/${{ env.COREOS_IMAGE_VERSION }}/x86_64/fedora-coreos-${{ env.COREOS_IMAGE_VERSION }}-digitalocean.x86_64.qcow2.gz"
          curl --output ${{ env.BUILD_DIR }}/coreos-image.qcow2.gz.sig "https://builds.coreos.fedoraproject.org/prod/streams/stable/builds/${{ env.COREOS_IMAGE_VERSION }}/x86_64/fedora-coreos-${{ env.COREOS_IMAGE_VERSION }}-digitalocean.x86_64.qcow2.gz.sig"
      
      - name: Verify Fedora CoreOS image
        run: |
          curl --output ${{ env.BUILD_DIR }}/fedora.gpg https://fedoraproject.org/fedora.gpg
          gpgv --keyring ${{ env.BUILD_DIR }}/fedora.gpg ${{ env.BUILD_DIR }}/coreos-image.qcow2.gz.sig ${{ env.BUILD_DIR }}/coreos-image.qcow2.gz
          # I would do checksum verification here... if fedora provided the checksums
          # sha256sum --ignore-missing -c coreos-image.qcow2.gz-CHECKSUM

      - name: Downloading coreos-installer image
        run: |
          podman pull quay.io/coreos/coreos-installer:release
          podman save --output ${{ env.BUILD_DIR }}/coreos-installer.tar quay.io/coreos/coreos-installer:release

      - name: Download ignition config
        uses: actions/download-artifact@v4
        with:
          name: ignition-config.zip
          path: ${{ env.BUILD_DIR }}/ignition-config.zip

      - name: Unzip artifact
        run: unzip -o ${{ env.BUILD_DIR }}/ignition-config.zip

      - name: Create signing keys
        run: abuild-keygen -ian

      - name: Build custom alpine image
        run: |
          export BUILDDIR=${{ env.BUILD_DIR }}
          export PROFILENAME=${{ env.PROFILENAME }}
          sh ${{ env.BUILD_DIR }}/aports/scripts/mkimage.sh --tag v3.21 --outdir ${{ env.BUILD_DIR }}/img --arch x86_64 --repository https://dl-cdn.alpinelinux.org/alpine/v3.21/main/ --profile ${{ env.PROFILENAME }}
          
      - name: Upload custom alpine image
        uses: actions/upload-artifact@v4
        with:
          name: alpine-reprovision.zip
          path: ${{ env.BUILD_DIR }}/img
          if-no-files-found: error